spring.application.name=rental-oc

# Server configuration
server.port=8080
server.servlet.context-path=/api

# Logging configuration
logging.level.org.springframework=INFO
logging.level.oc.rental=DEBUG
logging.level.org.hibernate.SQL=DEBUG

# CORS configuration
app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:4200}

# Database configuration
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DB:oc_rental}?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
spring.datasource.username=${MYSQL_USER:root}
spring.datasource.password=${MYSQL_PWD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA configuration (https://docs.spring.io/spring-boot/how-to/data-initialization.html)
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
# This will defer data source initialization until the schema creation performed by Hibernate !
spring.jpa.defer-datasource-initialization=true
# Database initialization via schema.sql and data.sql
spring.sql.init.mode=always

#### Spring docker-compose configuration
#spring.docker.compose.skip.in-tests:false
spring.docker.compose.enabled=false

# Springdoc OpenAPI configuration
springdoc.swagger-ui.path=/swagger
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.api-docs.path=/v3/api-docs
springdoc.api-docs.enabled=true

# Authentication configuration
# 512 bits (64 caracteres) - recommande
jwt.secret.key=${JWT_SECRET_KEY}
jwt.issuer=https://rental-oc.com
jwt.audience=rental-oc-app
# 30 min in milliseconds
jwt.expiration.time=18000000

# Static resources configuration
spring.web.resources.static-locations=classpath:/static/
spring.web.resources.add-mappings=true

# File upload configuration
app.upload.dir=src/main/resources/static/uploads
app.base.url=http://localhost:8080/api/uploads/